# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:42:58+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Path, Query
from pydantic import conint

from models import (
    Account,
    Accounts,
    AdClient,
    AdClients,
    AdCode,
    AdUnit,
    AdUnits,
    Alt,
    AssociationSession,
    CustomChannel,
    CustomChannels,
    Dimension,
    Filter,
    FilterAdClientId,
    HostCustomChannelId,
    Metric,
    ProductCode,
    Report,
    Sort,
    UrlChannel,
    UrlChannels,
)

app = MCPProxy(
    contact={'name': 'Google', 'url': 'https://google.com', 'x-twitter': 'youtube'},
    description='Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.',
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='AdSense Host API',
    version='v4.1',
    servers=[{'url': 'https://www.googleapis.com/adsensehost/v4.1'}],
)


@app.get(
    '/accounts',
    description=""" List hosted accounts associated with this AdSense account by ad client id. """,
    tags=['adsensehost_client_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_accounts_list(
    filter_ad_client_id: FilterAdClientId = Query(..., alias='filterAdClientId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}',
    description=""" Get information about the selected associated AdSense account. """,
    tags=['adsensehost_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_accounts_get(
    account_id: str = Path(..., alias='accountId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients',
    description=""" List all hosted ad clients in the specified hosted account. """,
    tags=['adsensehost_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_accounts_adclients_list(
    account_id: str = Path(..., alias='accountId'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}',
    description=""" Get information about one of the ad clients in the specified publisher's AdSense account. """,
    tags=['adsensehost_account_management', 'adsensehost_client_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_accounts_adclients_get(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}/adunits',
    description=""" List all ad units in the specified publisher's AdSense account. """,
    tags=['adsensehost_account_management', 'adsensehost_client_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_accounts_adunits_list(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    include_inactive: Optional[bool] = Query(None, alias='includeInactive'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/accounts/{accountId}/adclients/{adClientId}/adunits',
    description=""" Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics. """,
    tags=['adsensehost_adunit_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_accounts_adunits_patch(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    ad_unit_id: str = Query(..., alias='adUnitId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: AdUnit = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/adclients/{adClientId}/adunits',
    description=""" Insert the supplied ad unit into the specified publisher AdSense account. """,
    tags=['adsensehost_adunit_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_accounts_adunits_insert(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: AdUnit = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{accountId}/adclients/{adClientId}/adunits',
    description=""" Update the supplied ad unit in the specified publisher AdSense account. """,
    tags=['adsensehost_adunit_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_accounts_adunits_update(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: AdUnit = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}',
    description=""" Delete the specified ad unit from the specified publisher AdSense account. """,
    tags=['adsensehost_adunit_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_accounts_adunits_delete(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    ad_unit_id: str = Path(..., alias='adUnitId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}',
    description=""" Get the specified host ad unit in this AdSense account. """,
    tags=['adsensehost_adunit_operations', 'adsensehost_client_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_accounts_adunits_get(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    ad_unit_id: str = Path(..., alias='adUnitId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode',
    description=""" Get ad code for the specified ad unit, attaching the specified host custom channels. """,
    tags=['adsensehost_client_management', 'adsensehost_adunit_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_accounts_adunits_get_ad_code(
    account_id: str = Path(..., alias='accountId'),
    ad_client_id: str = Path(..., alias='adClientId'),
    ad_unit_id: str = Path(..., alias='adUnitId'),
    host_custom_channel_id: Optional[HostCustomChannelId] = Query(
        None, alias='hostCustomChannelId'
    ),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/reports',
    description=""" Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter. """,
    tags=['adsensehost_report_generation'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_accounts_reports_generate(
    account_id: str = Path(..., alias='accountId'),
    start_date: str = Query(..., alias='startDate'),
    end_date: str = Query(..., alias='endDate'),
    dimension: Optional[Dimension] = None,
    filter: Optional[Filter] = None,
    locale: Optional[str] = None,
    max_results: Optional[conint(ge=0, le=50000)] = Query(None, alias='maxResults'),
    metric: Optional[Metric] = None,
    sort: Optional[Sort] = None,
    start_index: Optional[conint(ge=0, le=5000)] = Query(None, alias='startIndex'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients',
    description=""" List all host ad clients in this AdSense account. """,
    tags=['adsensehost_report_generation'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_adclients_list(
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients/{adClientId}',
    description=""" Get information about one of the ad clients in the Host AdSense account. """,
    tags=['adsensehost_client_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_adclients_get(
    ad_client_id: str = Path(..., alias='adClientId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients/{adClientId}/customchannels',
    description=""" List all host custom channels in this AdSense account. """,
    tags=['adsensehost_client_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_customchannels_list(
    ad_client_id: str = Path(..., alias='adClientId'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/adclients/{adClientId}/customchannels',
    description=""" Update a custom channel in the host AdSense account. This method supports patch semantics. """,
    tags=['adsensehost_custom_channel_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_customchannels_patch(
    ad_client_id: str = Path(..., alias='adClientId'),
    custom_channel_id: str = Query(..., alias='customChannelId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: CustomChannel = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/adclients/{adClientId}/customchannels',
    description=""" Add a new custom channel to the host AdSense account. """,
    tags=['adsensehost_custom_channel_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_customchannels_insert(
    ad_client_id: str = Path(..., alias='adClientId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: CustomChannel = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/adclients/{adClientId}/customchannels',
    description=""" Update a custom channel in the host AdSense account. """,
    tags=['adsensehost_custom_channel_operations', 'adsensehost_client_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_customchannels_update(
    ad_client_id: str = Path(..., alias='adClientId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: CustomChannel = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/adclients/{adClientId}/customchannels/{customChannelId}',
    description=""" Delete a specific custom channel from the host AdSense account. """,
    tags=['adsensehost_client_management', 'adsensehost_custom_channel_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_customchannels_delete(
    ad_client_id: str = Path(..., alias='adClientId'),
    custom_channel_id: str = Path(..., alias='customChannelId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients/{adClientId}/customchannels/{customChannelId}',
    description=""" Get a specific custom channel from the host AdSense account. """,
    tags=['adsensehost_client_management', 'adsensehost_custom_channel_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_customchannels_get(
    ad_client_id: str = Path(..., alias='adClientId'),
    custom_channel_id: str = Path(..., alias='customChannelId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/adclients/{adClientId}/urlchannels',
    description=""" List all host URL channels in the host AdSense account. """,
    tags=['adsensehost_client_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_urlchannels_list(
    ad_client_id: str = Path(..., alias='adClientId'),
    max_results: Optional[conint(ge=0, le=10000)] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/adclients/{adClientId}/urlchannels',
    description=""" Add a new URL channel to the host AdSense account. """,
    tags=['adsensehost_url_channel_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_urlchannels_insert(
    ad_client_id: str = Path(..., alias='adClientId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: UrlChannel = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/adclients/{adClientId}/urlchannels/{urlChannelId}',
    description=""" Delete a URL channel from the host AdSense account. """,
    tags=['adsensehost_url_channel_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_urlchannels_delete(
    ad_client_id: str = Path(..., alias='adClientId'),
    url_channel_id: str = Path(..., alias='urlChannelId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/associationsessions/start',
    description=""" Create an association session for initiating an association with an AdSense user. """,
    tags=['adsensehost_session_associations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_associationsessions_start(
    product_code: ProductCode = Query(..., alias='productCode'),
    website_url: str = Query(..., alias='websiteUrl'),
    callback_url: Optional[str] = Query(None, alias='callbackUrl'),
    user_locale: Optional[str] = Query(None, alias='userLocale'),
    website_locale: Optional[str] = Query(None, alias='websiteLocale'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/associationsessions/verify',
    description=""" Verify an association session after the association callback returns from AdSense signup. """,
    tags=[
        'adsensehost_account_management',
        'adsensehost_client_management',
        'adsensehost_report_generation',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_associationsessions_verify(
    token: str,
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports',
    description=""" Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter. """,
    tags=['adsensehost_report_generation'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def adsensehost_reports_generate(
    start_date: str = Query(..., alias='startDate'),
    end_date: str = Query(..., alias='endDate'),
    dimension: Optional[Dimension] = None,
    filter: Optional[Filter] = None,
    locale: Optional[str] = None,
    max_results: Optional[conint(ge=0, le=50000)] = Query(None, alias='maxResults'),
    metric: Optional[Metric] = None,
    sort: Optional[Sort] = None,
    start_index: Optional[conint(ge=0, le=5000)] = Query(None, alias='startIndex'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
